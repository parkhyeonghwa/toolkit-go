// Automatically generated by MockGen. DO NOT EDIT!
// Source: session.go

package pmgomock

import (
	. "github.com/percona/toolkit-go/pmgo"
	gomock "github.com/vikstrous/mock/gomock"
	mgo_v2 "gopkg.in/mgo.v2"
)

// Mock of SessionManager interface
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *_MockSessionManagerRecorder
}

// Recorder for MockSessionManager (not exported)
type _MockSessionManagerRecorder struct {
	mock *MockSessionManager
}

func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &_MockSessionManagerRecorder{mock}
	return mock
}

func (_m *MockSessionManager) EXPECT() *_MockSessionManagerRecorder {
	return _m.recorder
}

func (_m *MockSessionManager) BuildInfo() (mgo_v2.BuildInfo, error) {
	ret := _m.ctrl.Call(_m, "BuildInfo")
	ret0, _ := ret[0].(mgo_v2.BuildInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionManagerRecorder) BuildInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildInfo")
}

func (_m *MockSessionManager) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSessionManagerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSessionManager) DB(name string) DatabaseManager {
	ret := _m.ctrl.Call(_m, "DB", name)
	ret0, _ := ret[0].(DatabaseManager)
	return ret0
}

func (_mr *_MockSessionManagerRecorder) DB(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DB", arg0)
}

func (_m *MockSessionManager) DatabaseNames() ([]string, error) {
	ret := _m.ctrl.Call(_m, "DatabaseNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionManagerRecorder) DatabaseNames() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DatabaseNames")
}

func (_m *MockSessionManager) Run(cmd interface{}, result interface{}) error {
	ret := _m.ctrl.Call(_m, "Run", cmd, result)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSessionManagerRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run", arg0, arg1)
}
